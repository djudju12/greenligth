// Code generated by MockGen. DO NOT EDIT.
// Source: internal/data/users.go
//
// Generated by this command:
//
//	mockgen -package mockdb -destination internal/mocks/user_mocks.go -source internal/data/users.go UserQuerier
//
// Package mockdb is a generated GoMock package.
package mockdb

import (
	reflect "reflect"

	data "github.com/djudju12/greenlight/internal/data"
	gomock "go.uber.org/mock/gomock"
)

// MockUserQuerier is a mock of UserQuerier interface.
type MockUserQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockUserQuerierMockRecorder
}

// MockUserQuerierMockRecorder is the mock recorder for MockUserQuerier.
type MockUserQuerierMockRecorder struct {
	mock *MockUserQuerier
}

// NewMockUserQuerier creates a new mock instance.
func NewMockUserQuerier(ctrl *gomock.Controller) *MockUserQuerier {
	mock := &MockUserQuerier{ctrl: ctrl}
	mock.recorder = &MockUserQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserQuerier) EXPECT() *MockUserQuerierMockRecorder {
	return m.recorder
}

// GetByEmail mocks base method.
func (m *MockUserQuerier) GetByEmail(email string) (*data.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", email)
	ret0, _ := ret[0].(*data.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockUserQuerierMockRecorder) GetByEmail(email any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUserQuerier)(nil).GetByEmail), email)
}

// GetForToken mocks base method.
func (m *MockUserQuerier) GetForToken(scope, tokenPlainText string) (*data.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForToken", scope, tokenPlainText)
	ret0, _ := ret[0].(*data.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForToken indicates an expected call of GetForToken.
func (mr *MockUserQuerierMockRecorder) GetForToken(scope, tokenPlainText any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForToken", reflect.TypeOf((*MockUserQuerier)(nil).GetForToken), scope, tokenPlainText)
}

// Insert mocks base method.
func (m *MockUserQuerier) Insert(user *data.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockUserQuerierMockRecorder) Insert(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockUserQuerier)(nil).Insert), user)
}

// Update mocks base method.
func (m *MockUserQuerier) Update(user *data.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserQuerierMockRecorder) Update(user any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserQuerier)(nil).Update), user)
}
