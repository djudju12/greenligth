// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/djudju12/greenlight/internal/data (interfaces: UserQuerier,PermissionQuerier,TokenQuerier)
//
// Generated by this command:
//
//	mockgen -package mockdb -destination internal/mocks/users_mocks.go --build_flags=--mod=mod github.com/djudju12/greenlight/internal/data UserQuerier,PermissionQuerier,TokenQuerier
//
// Package mockdb is a generated GoMock package.
package mockdb

import (
	reflect "reflect"
	time "time"

	data "github.com/djudju12/greenlight/internal/data"
	gomock "go.uber.org/mock/gomock"
)

// MockUserQuerier is a mock of UserQuerier interface.
type MockUserQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockUserQuerierMockRecorder
}

// MockUserQuerierMockRecorder is the mock recorder for MockUserQuerier.
type MockUserQuerierMockRecorder struct {
	mock *MockUserQuerier
}

// NewMockUserQuerier creates a new mock instance.
func NewMockUserQuerier(ctrl *gomock.Controller) *MockUserQuerier {
	mock := &MockUserQuerier{ctrl: ctrl}
	mock.recorder = &MockUserQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUserQuerier) EXPECT() *MockUserQuerierMockRecorder {
	return m.recorder
}

// GetByEmail mocks base method.
func (m *MockUserQuerier) GetByEmail(arg0 string) (*data.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetByEmail", arg0)
	ret0, _ := ret[0].(*data.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetByEmail indicates an expected call of GetByEmail.
func (mr *MockUserQuerierMockRecorder) GetByEmail(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetByEmail", reflect.TypeOf((*MockUserQuerier)(nil).GetByEmail), arg0)
}

// GetForToken mocks base method.
func (m *MockUserQuerier) GetForToken(arg0, arg1 string) (*data.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetForToken", arg0, arg1)
	ret0, _ := ret[0].(*data.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetForToken indicates an expected call of GetForToken.
func (mr *MockUserQuerierMockRecorder) GetForToken(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetForToken", reflect.TypeOf((*MockUserQuerier)(nil).GetForToken), arg0, arg1)
}

// Insert mocks base method.
func (m *MockUserQuerier) Insert(arg0 *data.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Insert", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Insert indicates an expected call of Insert.
func (mr *MockUserQuerierMockRecorder) Insert(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Insert", reflect.TypeOf((*MockUserQuerier)(nil).Insert), arg0)
}

// Update mocks base method.
func (m *MockUserQuerier) Update(arg0 *data.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update.
func (mr *MockUserQuerierMockRecorder) Update(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserQuerier)(nil).Update), arg0)
}

// MockPermissionQuerier is a mock of PermissionQuerier interface.
type MockPermissionQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockPermissionQuerierMockRecorder
}

// MockPermissionQuerierMockRecorder is the mock recorder for MockPermissionQuerier.
type MockPermissionQuerierMockRecorder struct {
	mock *MockPermissionQuerier
}

// NewMockPermissionQuerier creates a new mock instance.
func NewMockPermissionQuerier(ctrl *gomock.Controller) *MockPermissionQuerier {
	mock := &MockPermissionQuerier{ctrl: ctrl}
	mock.recorder = &MockPermissionQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPermissionQuerier) EXPECT() *MockPermissionQuerierMockRecorder {
	return m.recorder
}

// AddForUser mocks base method.
func (m *MockPermissionQuerier) AddForUser(arg0 int64, arg1 ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{arg0}
	for _, a := range arg1 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddForUser", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddForUser indicates an expected call of AddForUser.
func (mr *MockPermissionQuerierMockRecorder) AddForUser(arg0 any, arg1 ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{arg0}, arg1...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddForUser", reflect.TypeOf((*MockPermissionQuerier)(nil).AddForUser), varargs...)
}

// GetAllForUser mocks base method.
func (m *MockPermissionQuerier) GetAllForUser(arg0 int64) (data.Permissions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForUser", arg0)
	ret0, _ := ret[0].(data.Permissions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllForUser indicates an expected call of GetAllForUser.
func (mr *MockPermissionQuerierMockRecorder) GetAllForUser(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForUser", reflect.TypeOf((*MockPermissionQuerier)(nil).GetAllForUser), arg0)
}

// MockTokenQuerier is a mock of TokenQuerier interface.
type MockTokenQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockTokenQuerierMockRecorder
}

// MockTokenQuerierMockRecorder is the mock recorder for MockTokenQuerier.
type MockTokenQuerierMockRecorder struct {
	mock *MockTokenQuerier
}

// NewMockTokenQuerier creates a new mock instance.
func NewMockTokenQuerier(ctrl *gomock.Controller) *MockTokenQuerier {
	mock := &MockTokenQuerier{ctrl: ctrl}
	mock.recorder = &MockTokenQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockTokenQuerier) EXPECT() *MockTokenQuerierMockRecorder {
	return m.recorder
}

// DeleteAllForUser mocks base method.
func (m *MockTokenQuerier) DeleteAllForUser(arg0 string, arg1 int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteAllForUser", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteAllForUser indicates an expected call of DeleteAllForUser.
func (mr *MockTokenQuerierMockRecorder) DeleteAllForUser(arg0, arg1 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteAllForUser", reflect.TypeOf((*MockTokenQuerier)(nil).DeleteAllForUser), arg0, arg1)
}

// New mocks base method.
func (m *MockTokenQuerier) New(arg0 int64, arg1 time.Duration, arg2 string) (*data.Token, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "New", arg0, arg1, arg2)
	ret0, _ := ret[0].(*data.Token)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// New indicates an expected call of New.
func (mr *MockTokenQuerierMockRecorder) New(arg0, arg1, arg2 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "New", reflect.TypeOf((*MockTokenQuerier)(nil).New), arg0, arg1, arg2)
}
