// Code generated by MockGen. DO NOT EDIT.
// Source: internal/data/permissions.go
//
// Generated by this command:
//
//	mockgen -package mockdb -destination internal/mocks/permission_mocks.go -source internal/data/permissions.go PermissionQueriers
//
// Package mockdb is a generated GoMock package.
package mockdb

import (
	reflect "reflect"

	data "github.com/djudju12/greenlight/internal/data"
	gomock "go.uber.org/mock/gomock"
)

// MockPermissionQuerier is a mock of PermissionQuerier interface.
type MockPermissionQuerier struct {
	ctrl     *gomock.Controller
	recorder *MockPermissionQuerierMockRecorder
}

// MockPermissionQuerierMockRecorder is the mock recorder for MockPermissionQuerier.
type MockPermissionQuerierMockRecorder struct {
	mock *MockPermissionQuerier
}

// NewMockPermissionQuerier creates a new mock instance.
func NewMockPermissionQuerier(ctrl *gomock.Controller) *MockPermissionQuerier {
	mock := &MockPermissionQuerier{ctrl: ctrl}
	mock.recorder = &MockPermissionQuerierMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockPermissionQuerier) EXPECT() *MockPermissionQuerierMockRecorder {
	return m.recorder
}

// AddForUser mocks base method.
func (m *MockPermissionQuerier) AddForUser(userID int64, codes ...string) error {
	m.ctrl.T.Helper()
	varargs := []any{userID}
	for _, a := range codes {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "AddForUser", varargs...)
	ret0, _ := ret[0].(error)
	return ret0
}

// AddForUser indicates an expected call of AddForUser.
func (mr *MockPermissionQuerierMockRecorder) AddForUser(userID any, codes ...any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	varargs := append([]any{userID}, codes...)
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AddForUser", reflect.TypeOf((*MockPermissionQuerier)(nil).AddForUser), varargs...)
}

// GetAllForUser mocks base method.
func (m *MockPermissionQuerier) GetAllForUser(userID int64) (data.Permissions, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetAllForUser", userID)
	ret0, _ := ret[0].(data.Permissions)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetAllForUser indicates an expected call of GetAllForUser.
func (mr *MockPermissionQuerierMockRecorder) GetAllForUser(userID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetAllForUser", reflect.TypeOf((*MockPermissionQuerier)(nil).GetAllForUser), userID)
}
